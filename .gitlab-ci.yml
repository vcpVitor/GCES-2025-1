stages:
  - build
  - test
  - lint

variables:
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# This service is used for building docker images
services:
  - docker:dind

build_api:
  stage: build
  image: docker:latest
  before_script:
    # Docker login is required to push images to the registry, but it's a good practice
    # to include it even for building, in case you want to push later.
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/api:latest -f Dockerfile.dev.api .
    - docker push $CI_REGISTRY_IMAGE/api:latest

build_www:
  stage: build
  image: docker:latest
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/www:latest -f Dockerfile.dev.www .
    - docker push $CI_REGISTRY_IMAGE/www:latest

test_api:
  stage: test
  image: python:3.8-slim
  variables:
    SECRET_KEY: "ci-test-key"
    IGNORE_DOT_ENV_FILE: "on"
  before_script:
    - apt-get update && apt-get install -y gcc libpq-dev
    - pip install -r requirements/base.txt
    - pip install -r requirements/server.txt
  script:
    - python manage.py test

test_www:
  stage: test
  image: $CI_REGISTRY_IMAGE/www:latest
  needs: ["build_www"]
  before_script:
    - cd www
    - npm install
  script:
    - npm test

lint_api:
  stage: lint
  image: python:3.8-slim
  before_script:
    - pip install ruff
  script:
    - ruff check .

lint_www:
  stage: lint
  image: $CI_REGISTRY_IMAGE/www:latest
  needs: ["build_www"]
  before_script:
    - cd www
    - npm install
  script:
    - npm run lint
